{"version":3,"sources":["validator.js"],"names":["refactor1","a","b","not","isEmpty","withMessage","isInt","isLength","min","refactor2","postValidate","isEmail","userSignUpValidate","userSignInValidate"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAU,6BAAMD,CAAN,EACzBE,GADyB,GACnBC,OADmB,GACTC,WADS,WACMJ,CADN,mBAEzBK,KAFyB,GAGzBD,WAHyB,WAGVJ,CAHU,8BAIzBM,QAJyB,CAIhB;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAJgB,EAKzBH,WALyB,CAKbH,CALa,CAAV;AAAA,CAAlB;;AAOA,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAACR,CAAD,EAAIC,CAAJ;AAAA,SAAU,6BAAMD,CAAN,EACzBE,GADyB,GACnBC,OADmB,GACTC,WADS,WACMJ,CADN,mBAEzBM,QAFyB,CAEhB;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAFgB,EAGzBH,WAHyB,WAGVJ,CAHU,wBAGKC,CAHL,yBAAV;AAAA,CAAlB;;AAKA,IAAMQ,YAAY,GAAG,CACnB,6BAAM,OAAN,EAAe,sCAAf,EAAuDC,OAAvD,EADmB,EAEnBX,SAAS,CAAC,OAAD,EAAU,wBAAV,CAFU,EAGnB,6BAAM,OAAN,EAAe,oDAAf,EAAqEO,QAArE,CAA8E;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAA9E,CAHmB,EAInB,6BAAM,MAAN,EAAc,8CAAd,EAA8DD,QAA9D,CAAuE;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAvE,CAJmB,EAKnB,6BAAM,SAAN,EAAiB,6CAAjB,EAAgED,QAAhE,CAAyE;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAAzE,CALmB,EAMnB,6BAAM,MAAN,EAAc,qCAAd,EAAqDD,QAArD,CAA8D;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAA9D,CANmB,CAArB;AASA,IAAMI,kBAAkB,GAAG,CACzB,6BAAM,OAAN,EAAe,4BAAf,EAA6CD,OAA7C,EADyB,EAEzBF,SAAS,CAAC,YAAD,EAAe,CAAf,CAFgB,EAGzBA,SAAS,CAAC,WAAD,EAAc,CAAd,CAHgB,EAIzBA,SAAS,CAAC,UAAD,EAAa,CAAb,CAJgB,EAKzBT,SAAS,CAAC,aAAD,EAAgB,mCAAhB,CALgB,EAMzBS,SAAS,CAAC,SAAD,EAAY,CAAZ,CANgB,CAA3B;AASA,IAAMI,kBAAkB,GAAG,CACzB,6BAAM,OAAN,EAAe,4BAAf,EAA6CF,OAA7C,EADyB,EAEzBF,SAAS,CAAC,UAAD,EAAa,CAAb,CAFgB,CAA3B;eAMe;AAAEC,EAAAA,YAAY,EAAZA,YAAF;AAAgBE,EAAAA,kBAAkB,EAAlBA,kBAAhB;AAAoCC,EAAAA,kBAAkB,EAAlBA;AAApC,C","sourceRoot":"D:\\Property-Pro-Lite1\\server\\helpers","sourcesContent":["import { check } from 'express-validator';\r\n\r\nconst refactor1 = (a, b) => check(a)\r\n  .not().isEmpty().withMessage(`${a} is required`)\r\n  .isInt()\r\n  .withMessage(`${a} must be a valid number`)\r\n  .isLength({ min: 3 })\r\n  .withMessage(b);\r\n\r\nconst refactor2 = (a, b) => check(a)\r\n  .not().isEmpty().withMessage(`${a} is required`)\r\n  .isLength({ min: 3 })\r\n  .withMessage(`${a} should be ${b} characters or more`);\r\n\r\nconst postValidate = [\r\n  check('owner', 'Owner should be set to a valid email').isEmail(),\r\n  refactor1('price', 'not valid price amount'),\r\n  check('state', 'Enter state and must be more than three characters').isLength({ min: 3 }),\r\n  check('city', 'Enter city and must be more than 3 character').isLength({ min: 3 }),\r\n  check('address', 'Enter Address and must be more than 5 chars').isLength({ min: 5 }),\r\n  check('type', 'Enter type and must be a valid type').isLength({ min: 3 }),\r\n];\r\n\r\nconst userSignUpValidate = [\r\n  check('email', 'you must use a valid Email').isEmail(),\r\n  refactor2('first_name', 3),\r\n  refactor2('last_name', 3),\r\n  refactor2('password', 5),\r\n  refactor1('phoneNumber', 'Use 11 character for phone number'),\r\n  refactor2('address', 5),\r\n];\r\n\r\nconst userSignInValidate = [\r\n  check('email', 'you must use a valid Email').isEmail(),\r\n  refactor2('password', 5),\r\n];\r\n\r\n\r\nexport default { postValidate, userSignUpValidate, userSignInValidate };\r\n"]}