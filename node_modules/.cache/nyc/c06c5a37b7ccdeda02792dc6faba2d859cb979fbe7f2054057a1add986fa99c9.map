{"version":3,"sources":["auth.js"],"names":["authMiddleware","req","res","next","token","header","status","send","error","decoded","jwt","verify","user","payloader","data","code","payload","id","sign","expiresIn","err"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;;;;;;;;AASA,IAAMA,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,KADe,GACPH,GAAG,CAACI,MAAJ,CAAW,cAAX,CADO;;AAAA,gBAEhBD,KAFgB;AAAA;AAAA;AAAA;;AAAA,6CAGZF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,OADkB;AAE1BE,cAAAA,KAAK,EAAE;AAFmB,aAArB,CAHY;;AAAA;AAAA;AASbC,YAAAA,OATa,GASHC,yBAAIC,MAAJ,CAAWP,KAAX,EAAkB,WAAlB,CATG;AAUnBH,YAAAA,GAAG,CAACW,IAAJ,GAAWH,OAAO,CAACG,IAAnB;AACAT,YAAAA,IAAI;AAXe;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAaZD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,OADkB;AAE1BE,cAAAA,KAAK,EAAE;AAFmB,aAArB,CAbY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdR,cAAc;AAAA;AAAA;AAAA,GAApB;AAoBA;;;;;;;;AAOA,IAAMa,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOX,GAAP,EAAYY,IAAZ,EAAkBC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,YAAAA,OADU,GACA;AACdJ,cAAAA,IAAI,EAAE;AACJK,gBAAAA,EAAE,EAAEH,IAAI,CAACG;AADL;AADQ,aADA;AAAA;AAAA,mBAMVP,yBAAIQ,IAAJ,CACJF,OADI,EAEJ,WAFI,EAGJ;AAAEG,cAAAA,SAAS,EAAE;AAAb,aAHI,EAIJ,UAACC,GAAD,EAAMhB,KAAN,EAAgB;AACd,kBAAIgB,GAAJ,EAAS,MAAMA,GAAN;AACT,qBAAOlB,GAAG,CAACI,MAAJ,CAAWS,IAAX,EAAiBR,IAAjB,CAAsB;AAC3BD,gBAAAA,MAAM,EAAE,SADmB;AAE3BQ,gBAAAA,IAAI,EAAE;AACJV,kBAAAA,KAAK,EAALA,KADI;AAEJU,kBAAAA,IAAI,EAAJA;AAFI;AAFqB,eAAtB,CAAP;AAOD,aAbG,CANU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATD,SAAS;AAAA;AAAA;AAAA,GAAf;;eAuBe;AAAEb,EAAAA,cAAc,EAAdA,cAAF;AAAkBa,EAAAA,SAAS,EAATA;AAAlB,C","sourceRoot":"D:\\Property-Pro-Lite1\\server\\helpers","sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\n/**\r\n * Authenticates a User.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @param {object} next calls the next middleware.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst authMiddleware = async (req, res, next) => {\r\n  const token = req.header('x-auth-token');\r\n  if (!token) {\r\n    return res.status(401).send({\r\n      status: 'error',\r\n      error: 'No token, auth denied'\r\n    });\r\n  }\r\n  try {\r\n    const decoded = jwt.verify(token, 'jwtSecret');\r\n    req.user = decoded.user;\r\n    next();\r\n  } catch (err) {\r\n    return res.status(401).send({\r\n      status: 'error',\r\n      error: 'Invalid Token'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Payload middleware/helper function.\r\n * @param {object} res the response object.\r\n * @param {object} data the payload parameter.\r\n *\r\n*/\r\n\r\nconst payloader = async (res, data, code) => {\r\n  const payload = {\r\n    user: {\r\n      id: data.id\r\n    }\r\n  };\r\n  await jwt.sign(\r\n    payload,\r\n    'jwtSecret',\r\n    { expiresIn: '7d' },\r\n    (err, token) => {\r\n      if (err) throw err;\r\n      return res.status(code).send({\r\n        status: 'success',\r\n        data: {\r\n          token,\r\n          data,\r\n        }\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\nexport default { authMiddleware, payloader };\r\n"]}