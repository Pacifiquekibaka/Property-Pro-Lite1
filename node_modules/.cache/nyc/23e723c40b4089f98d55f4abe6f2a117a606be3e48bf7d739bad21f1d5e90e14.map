{"version":3,"sources":["usersController.js"],"names":["users","database","payloader","payload","authError","errorHelpers","inputError","userExists","checkIfUserExists","req","find","user","email","userSignUp","res","body","first_name","last_name","phoneNumber","address","is_admin","password","data","bcrypt","genSalt","salt","hash","newUser","length","status","send","error","userSignIn","undefined","compare","isMatch","console","log"],"mappings":"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","sourceRoot":"D:\\Property-Pro-Lite1\\server\\controllers","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport database from '../models/database';\r\nimport saveNewUser from '../helpers/usersHelper';\r\nimport payload from '../helpers/auth';\r\nimport errorHelpers from '../helpers/errorHelper';\r\n\r\nconst { users } = database;\r\nconst { payloader } = payload;\r\nconst { authError, inputError, userExists } = errorHelpers;\r\n\r\nconst checkIfUserExists = req => users.find(user => user.email === req);\r\n\r\n/**\r\n * Sign up a new User account.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst userSignUp = async (req, res) => {\r\n  const {\r\n    email, first_name, last_name, phoneNumber, address, is_admin\r\n  } = req.body;\r\n  let { password } = req.body;\r\n  inputError(req, res);\r\n  const data = checkIfUserExists(email);\r\n  userExists(data, res);\r\n  try {\r\n    const salt = await bcrypt.genSalt(10);\r\n    password = await bcrypt.hash(password, salt);\r\n    const newUser = await saveNewUser(\r\n      email, first_name, last_name, password, phoneNumber, address, is_admin\r\n    );\r\n    return payloader(res, newUser[newUser.length - 1], 201);\r\n  } catch (err) {\r\n    return res.status(500).send({\r\n      status: 500,\r\n      error: err,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Login an existing User account.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst userSignIn = async (req, res) => {\r\n  const { email } = req.body;\r\n  const { password } = req.body;\r\n  inputError(req, res);\r\n  const data = checkIfUserExists(email);\r\n  if (data === undefined) {\r\n    return authError(res);\r\n  }\r\n  const isMatch = await bcrypt.compare(password, data.password);\r\n  if (!isMatch) {\r\n    return authError(res);\r\n  }\r\n  try {\r\n    return payloader(res, data, 200);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport default { userSignUp, userSignIn };\r\n"]}