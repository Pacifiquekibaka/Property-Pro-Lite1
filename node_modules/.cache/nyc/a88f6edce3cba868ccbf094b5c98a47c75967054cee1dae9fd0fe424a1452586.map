{"version":3,"sources":["propertiesController.js"],"names":["saveNewProperty","helpers","updateProperty","deletesProperty","property","database","imageUpload","cloudinary","inputError","errorHelpers","checkProperty","req","find","prop","id","parseInt","checkPropertyType","type","getAllProperties","res","status","send","data","message","getPropertiesByType","query","getProperty","params","postProperty","body","owner","price","state","city","address","image_url","image_uri","newProperty","length","putProperty","undefined","updatedProperty","error","deleteProperty"],"mappings":"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","sourceRoot":"D:\\Property-Pro-Lite1\\server\\controllers","sourcesContent":["import database from '../models/database';\r\nimport helpers from '../helpers/propertyHelper';\r\nimport getProps from '../helpers/getProperty';\r\nimport cloudinary from '../helpers/cloudinary';\r\nimport errorHelpers from '../helpers/errorHelper';\r\n\r\nconst { saveNewProperty, \r\n        updateProperty, \r\n        deletesProperty } = helpers;\r\nconst { property } = database;\r\nconst imageUpload = cloudinary;\r\nconst { inputError } = errorHelpers;\r\n\r\n\r\n/**\r\n * check if the property id is correct\r\n * @param  {Object} req the request object\r\n * @return  {Function} calls the next middleware if test passes\r\n */\r\nconst checkProperty = req => property.find(prop => prop.id === parseInt(req, 10));\r\nconst checkPropertyType = req => property.find(prop => prop.type === req);\r\n\r\n\r\n/**\r\n * Get all properties.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst getAllProperties = (req, res) => res.status(200).send({\r\n  status: 200,\r\n  data: {\r\n    message: 'Properties successfully received',\r\n    property,\r\n  }\r\n});\r\n\r\n/**\r\n * Get all properties of a certain type, e.g 2 bedroom.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst getPropertiesByType = (req, res) => {\r\n  getProps(checkPropertyType(req.query.type), res, 'Invalid type');\r\n};\r\n\r\n/**\r\n * Get a specific property.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst getProperty = (req, res) => {\r\n  getProps(checkProperty(req.params.id), res, 'Invalid ID');\r\n};\r\n\r\n/**\r\n * Create/POST a property ad.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst postProperty = async (req, res) => {\r\n  const {\r\n    owner, price, state, city, address, type, image_url\r\n  } = req.body;\r\n  inputError(req, res);\r\n  const image_uri = imageUpload(image_url);\r\n\r\n  const newProperty = await saveNewProperty(\r\n    owner, price, state, city, address, type, image_uri\r\n  );\r\n  return res.status(201).send({\r\n    status: 201,\r\n    data: {\r\n      newProperty: newProperty[newProperty.length - 1],\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Update property data.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst putProperty = (req, res) => {\r\n  const data = checkProperty(req.params.id);\r\n  if (data !== undefined) {\r\n    const {\r\n      owner, status, price, state, city, address, type, image_url\r\n    } = req.body;\r\n\r\n    const updatedProperty = updateProperty(\r\n      data.id, owner, status, price, state,\r\n      city, address, type, image_url\r\n    );\r\n    return res.status(201).send({\r\n      status: 201,\r\n      data: {\r\n        message: 'Property updated successfully',\r\n        updatedProperty\r\n      }\r\n    });\r\n  }\r\n  return res.status(400).send({\r\n    status: 400,\r\n    error: 'Property ad not found',\r\n  });\r\n};\r\n\r\n/**\r\n * Delete a property ad.\r\n * @param {object} req the request object.\r\n * @param {object} res the response object.\r\n * @return  {Function} next calls the next middleware\r\n *\r\n*/\r\n\r\nconst deleteProperty = async (req, res) => {\r\n  const data = await checkProperty(req.params.id);\r\n  if (data !== undefined) {\r\n    // console.log(data.id);\r\n    await deletesProperty(data.id);\r\n    return res.status(200).send({\r\n      status: 200,\r\n      message: 'Property ad deleted successfully',\r\n    });\r\n  }\r\n  return res.status(400).send({\r\n    status: 400,\r\n    error: 'Property ad not found',\r\n  });\r\n};\r\n\r\n\r\nexport default {\r\n  getAllProperties, \r\n  getPropertiesByType, \r\n  getProperty, \r\n  postProperty, \r\n  putProperty, \r\n  deleteProperty\r\n};\r\n"]}