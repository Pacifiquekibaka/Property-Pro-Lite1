{"version":3,"sources":["propertyHelper.js"],"names":["property","database","saveNewProperty","owner","price","state","city","address","type","image_url","newProperty","id","length","status","created_on","Date","toDateString","push","updateProperty","propertyId","find","prop","deletesProperty","index","indexOf","splice"],"mappings":";;;;;;;AAAA;;;;IAEQA,Q,GAAaC,oB,CAAbD,Q;AAGR;;;;;;;;;;;;;;;AAeA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2CC,SAA3C,EAAyD;AAC/E,MAAMC,WAAW,GAAG;AAClBC,IAAAA,EAAE,EAAEX,QAAQ,CAACY,MAAT,GAAkB,CADJ;AAElBT,IAAAA,KAAK,EAALA,KAFkB;AAGlBU,IAAAA,MAAM,EAAE,WAHU;AAIlBT,IAAAA,KAAK,EAALA,KAJkB;AAKlBC,IAAAA,KAAK,EAALA,KALkB;AAMlBC,IAAAA,IAAI,EAAJA,IANkB;AAOlBC,IAAAA,OAAO,EAAPA,OAPkB;AAQlBC,IAAAA,IAAI,EAAJA,IARkB;AASlBM,IAAAA,UAAU,EAAE,IAAIC,IAAJ,GAAWC,YAAX,EATM;AAUlBP,IAAAA,SAAS,EAATA;AAVkB,GAApB;AAYAT,EAAAA,QAAQ,CAACiB,IAAT,CAAcP,WAAd;AACA,SAAOV,QAAP;AACD,CAfD;AAiBA;;;;;;;;;;;;;;;;AAeA,IAAMkB,cAAc,GAAG,SAAjBA,cAAiB,CAACP,EAAD,EAAKR,KAAL,EAAYU,MAAZ,EAAoBT,KAApB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiDC,IAAjD,EAAuDC,SAAvD,EAAqE;AAC1F,MAAMU,UAAU,GAAGnB,QAAQ,CAACoB,IAAT,CAAc,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACV,EAAL,KAAYA,EAAhB;AAAA,GAAlB,CAAnB;AACAQ,EAAAA,UAAU,CAAChB,KAAX,GAAmBA,KAAK,IAAIgB,UAAU,CAAChB,KAAvC;AACAgB,EAAAA,UAAU,CAACN,MAAX,GAAoBA,MAAM,IAAIM,UAAU,CAACN,MAAzC;AACAM,EAAAA,UAAU,CAACf,KAAX,GAAmBA,KAAK,IAAIe,UAAU,CAACf,KAAvC;AACAe,EAAAA,UAAU,CAACd,KAAX,GAAmBA,KAAK,IAAIc,UAAU,CAACd,KAAvC;AACAc,EAAAA,UAAU,CAACb,IAAX,GAAkBA,IAAI,IAAIa,UAAU,CAACb,IAArC;AACAa,EAAAA,UAAU,CAACZ,OAAX,GAAqBA,OAAO,IAAIY,UAAU,CAACZ,OAA3C;AACAY,EAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAI,IAAIW,UAAU,CAACX,IAArC;AACAW,EAAAA,UAAU,CAACV,SAAX,GAAuBA,SAAS,IAAIU,UAAU,CAACV,SAA/C;AACA,SAAOU,UAAP;AACD,CAXD;AAcA;;;;;;;;AAOA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACX,EAAD,EAAQ;AAC9B,MAAMY,KAAK,GAAGvB,QAAQ,CAACwB,OAAT,CAAiBb,EAAjB,CAAd;AACAX,EAAAA,QAAQ,CAACyB,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB;AACD,CAHD;;eAMe;AAAErB,EAAAA,eAAe,EAAfA,eAAF;AAAmBgB,EAAAA,cAAc,EAAdA,cAAnB;AAAmCI,EAAAA,eAAe,EAAfA;AAAnC,C","sourceRoot":"D:\\Property-Pro-Lite1\\server\\helpers","sourcesContent":["import database from '../models/database';\r\n\r\nconst { property } = database;\r\n\r\n\r\n/**\r\n   * Create a new property.\r\n   * @param {object} owner the owner of the property ad.\r\n   * @param {object} status current status of the property ad, e.g available/sold.\r\n   * @param {object} price the price of the property ad.\r\n   * @param {object} state the state location of the property ad.\r\n   * @param {object} city the city location of the property ad.\r\n   * @param {object} address the address location of the property ad.\r\n   * @param {object} type the type of the property ad, e.g 2 bedroom.\r\n   * @param {object} created_on the date the property ad was posted.\r\n   * @param {object} image_url the image url of the property ad.\r\n   * @return  {Function} next calls the next middleware\r\n   *\r\n   */\r\n\r\nconst saveNewProperty = (owner, price, state, city, address, type, image_url) => {\r\n  const newProperty = {\r\n    id: property.length + 1,\r\n    owner,\r\n    status: 'available',\r\n    price,\r\n    state,\r\n    city,\r\n    address,\r\n    type,\r\n    created_on: new Date().toDateString(),\r\n    image_url,\r\n  };\r\n  property.push(newProperty);\r\n  return property;\r\n};\r\n\r\n/**\r\n   * Update existing property.\r\n   * @param {object} owner the owner of the property ad.\r\n   * @param {object} status current status of the property ad, e.g available/sold.\r\n   * @param {object} price the price of the property ad.\r\n   * @param {object} state the state location of the property ad.\r\n   * @param {object} city the city location of the property ad.\r\n   * @param {object} address the address location of the property ad.\r\n   * @param {object} type the type of the property ad, e.g 2 bedroom.\r\n   * @param {object} created_on the date the property ad was posted.\r\n   * @param {object} image_url the image url of the property ad.\r\n   * @return  {Function} next calls the next middleware\r\n   *\r\n   */\r\n\r\nconst updateProperty = (id, owner, status, price, state, city, address, type, image_url) => {\r\n  const propertyId = property.find(prop => prop.id === id);\r\n  propertyId.owner = owner || propertyId.owner;\r\n  propertyId.status = status || propertyId.status;\r\n  propertyId.price = price || propertyId.price;\r\n  propertyId.state = state || propertyId.state;\r\n  propertyId.city = city || propertyId.city;\r\n  propertyId.address = address || propertyId.address;\r\n  propertyId.type = type || propertyId.type;\r\n  propertyId.image_url = image_url || propertyId.image_url;\r\n  return propertyId;\r\n};\r\n\r\n\r\n/**\r\n   * Delete existing property.\r\n   * @param {object} id the id of the property ad to be deleted.\r\n   * @return  {Function} next calls the next middleware\r\n   *\r\n   */\r\n\r\nconst deletesProperty = (id) => {\r\n  const index = property.indexOf(id);\r\n  property.splice(index, 1);\r\n};\r\n\r\n\r\nexport default { saveNewProperty, updateProperty, deletesProperty };\r\n"]}